name: Deploy to Production 

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_OAUTH_CLIENT_ID }}
        # mock DB url due to Nextjs build process with routes
        DATABASE_URL: "postgresql://build:build@localhost:5432/build_placeholder"

    - name: Create deployment package
      run: |
        tar -czf deploy.tar.gz .next dist package.json package-lock.json public ecosystem.config.js
    
    - name: Securely copy package to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "deploy.tar.gz"
        target: "/tmp/"

    - name: Deploy, Verify, and Cleanup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          set -e # Exit immediately if a command exits with a non-zero status.

          # --- 1. Configuration and Setup ---
          echo "Starting deployment..."
          APP_DIR="/var/www/metal-vault"
          RELEASES_DIR="$APP_DIR/releases"
          NEW_RELEASE_DIR="$RELEASES_DIR/$(date +%Y%m%d%H%M%S)"
          
          echo "Creating new release directory: $NEW_RELEASE_DIR"
          mkdir -p $NEW_RELEASE_DIR

          # --- 2. Unpack the new release ---
          echo "Unpacking release package..."
          tar -xzf /tmp/deploy.tar.gz -C $NEW_RELEASE_DIR
          rm /tmp/deploy.tar.gz
          cd $NEW_RELEASE_DIR

          # --- 3. Install Production Dependencies ---
          echo "Installing production dependencies..."
          npm ci --only=production --force
          
          # --- 4. Prepare Environment & Logs ---
          echo "Copying production .env file..."
          if [ -f "$APP_DIR/.env" ]; then
            cp $APP_DIR/.env $NEW_RELEASE_DIR/.env
            echo ".env file copied."
          else
            echo "Warning: No .env file found in $APP_DIR. Skipping copy."
          fi

          echo "Creating logs directory..."
          mkdir -p $NEW_RELEASE_DIR/logs

          # --- Set Permissions ---
          echo "Setting file permissions..."
          sudo chown -R ${{ secrets.VPS_USERNAME }}:www-data $NEW_RELEASE_DIR
          sudo chmod -R 775 $NEW_RELEASE_DIR

          # --- 5. Atomically Switch to New Release ---
          echo "Activating new release..."
          ln -sfn $NEW_RELEASE_DIR $APP_DIR/current
          echo "Symlink updated. Current release is now:"
          ls -l $APP_DIR/current

          # --- 6. Restart Application and Verify ---
          echo "Starting clean application slate with PM2..."
          # Delete all old processes to ensure a clean start
          pm2 delete all || true
          # Change directory to the new release
          cd $APP_DIR/current
          # Start all applications defined in the new ecosystem file
          pm2 start ecosystem.config.js
          # Save the new process list to be resurrected on reboot
          pm2 save
          
          echo "Application status after clean start:"
          pm2 list

          # --- 7. Cleanup Old Releases ---
          echo "ðŸ§¹ Cleaning up old releases..."
          ls -dt $RELEASES_DIR/* | tail -n +4 | xargs -r rm -rf
          echo "Kept the 3 most recent releases. Cleanup complete."

          echo "ðŸŽ‰ Deployment completed successfully!"