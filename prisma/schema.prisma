// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  image           String?
  role            String?
  shard           Int?
  emailSettings   Json?        @map("email_settings")
  bandsSettings   Json?        @map("bands_settings")
  releaseSettings Json?        @map("release_settings")
  postsSettings   Json?        @map("posts_settings")
  emailVerified   DateTime?    @map("email_verified")
  accountCreated  DateTime?    @map("account_created")
  lastLogin       DateTime?    @map("last_login")
  accounts        Account[]
  sessions        Session[]
  UserPosts0      UserPosts0[]
  UserPosts1      UserPosts1[]
  UserPosts2      UserPosts2[]
  UserPosts3      UserPosts3[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Bands {
  id           String       @id @default(cuid())
  name         String
  namePretty   String       @map("name_pretty")
  genreTags    String[]     @map("genre_tags") @db.VarChar
  country      String?
  status       String?
  followers    Int?         @default(0)
  archivesLink BigInt       @map("archives_link")
  spotifyId    String?      @map("spotify_id")
  albums       BandAlbums[]

  @@unique([archivesLink])
  @@index([genreTags], type: Gin)
  @@map("bands")
}

model BandsBackup {
  id           String   @id
  name         String
  namePretty   String   @map("name_pretty")
  genreTags    String[] @map("genre_tags") @db.VarChar
  country      String?
  status       String?
  followers    Int?     @default(0)
  archivesLink BigInt?  @map("archives_link")
  spotifyId    String?  @map("spotify_id")

  @@map("bands_backup")
}

model BandAlbums {
  id           String    @id @default(cuid())
  bandId       String    @map("band_id")
  name         String    @map("name")
  namePretty   String    @map("name_pretty")
  archivesLink BigInt?   @map("archives_link")
  type         String?
  releaseDate  DateTime? @map("release_date")
  band         Bands     @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@unique([archivesLink])
  @@map("band_albums")
}

model UpcomingReleases {
  id                String    @id @default(cuid())
  bandId            String    @map("band_id")
  bandName          String    @map("band_name")
  albumName         String    @map("album_name")
  genreTags         String[]  @map("genre_tags") @db.VarChar
  bandArchivesLink  BigInt?   @map("band_archives_link")
  albumArchivesLink BigInt?   @map("album_archives_link")
  type              String?
  releaseDate       DateTime? @map("release_date")

  @@unique([albumArchivesLink])
  @@map("upcoming_releases")
}

model BandFollowers0 {
  id     String @id @default(cuid())
  bandId String @map("band_id")
  userId String @map("user_id")

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([userId])
  @@map("band_followers_0")
}

model BandFollowers1 {
  id     String @id @default(cuid())
  bandId String @map("band_id")
  userId String @map("user_id")

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([userId])
  @@map("band_followers_1")
}

model UserPosts0 {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  bandId       String?  @map("band_id")
  bandName     String?  @map("bandname")
  title        String?
  genre        String?
  postContent  String   @map("post_content")
  YTLink       String?  @map("yt_link")
  SpotifyLink  String?  @map("spotify_link")
  BandCampLink String?  @map("bandcamp_link")
  preview_url  String?  @map("preview_url")
  postDateTime DateTime @default(now()) @map("post_datetime")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_posts_0")
}

model UserPosts1 {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  bandId       String?  @map("band_id")
  bandName     String?  @map("bandname")
  title        String?
  genre        String?
  postContent  String   @map("post_content")
  YTLink       String?  @map("yt_link")
  SpotifyLink  String?  @map("spotify_link")
  BandCampLink String?  @map("bandcamp_link")
  preview_url  String?  @map("preview_url")
  postDateTime DateTime @default(now()) @map("post_datetime")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_posts_1")
}

model UserPosts2 {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  bandId       String?  @map("band_id")
  bandName     String?  @map("bandname")
  title        String?
  genre        String?
  postContent  String   @map("post_content")
  YTLink       String?  @map("yt_link")
  SpotifyLink  String?  @map("spotify_link")
  BandCampLink String?  @map("bandcamp_link")
  preview_url  String?  @map("preview_url")
  postDateTime DateTime @default(now()) @map("post_datetime")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_posts_2")
}

model UserPosts3 {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  bandId       String?  @map("band_id")
  bandName     String?  @map("bandname")
  title        String?
  genre        String?
  postContent  String   @map("post_content")
  YTLink       String?  @map("yt_link")
  SpotifyLink  String?  @map("spotify_link")
  BandCampLink String?  @map("bandcamp_link")
  preview_url  String?  @map("preview_url")
  postDateTime DateTime @default(now()) @map("post_datetime")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_posts_3")
}

model GenreTags {
  genres String @id

  @@map("genre_tags")
}
