// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  userName        String?
  email           String?   @unique
  emailVerified   Boolean   @default(false)
  location        String?
  image           String?
  role            String?
  shard           Int?
  emailSettings   Json?     @map("email_settings")
  bandsSettings   Json?     @map("bands_settings")
  releaseSettings Json?     @map("release_settings")
  postsSettings   Json?     @map("posts_settings")
  lastLogin       DateTime? @map("last_login")
  genreTags       String[]  @map("genre_tags")
  notifications   Json?
  pendingActions  String[]  @default([]) @map("pending_actions")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  UserTokens        UserTokens[]
  BandFollowers0    BandFollowers0[]
  BandFollowers1    BandFollowers1[]
  UserPostsActive   UserPostsActive[]
  UserPostsArchived UserPostsArchived[]
  Events            Events[]
  BandUnFollowers0  BandUnFollowers0[]
  BandUnFollowers1  BandUnFollowers1[]
  UserUnFollowers0  UserUnFollowers0[]
  UserUnFollowers1  UserUnFollowers1[]
  ReportedPosts     ReportedPosts[]
  UserPostsSaved    UserPostsSaved[]
  UserEventsSaved   UserEventsSaved[]
  UserFeedback      UserFeedback[]

  @@map("users")
}

model Account {
  id String @id @default(cuid())

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserTokens {
  id           Int    @id @default(autoincrement())
  userId       String
  provider     String
  refreshToken String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("user_tokens")
}

model Bands {
  id                String              @id @default(cuid())
  name              String
  namePretty        String              @map("name_pretty")
  genreTags         String[]            @default([]) @map("genre_tags")
  country           String?
  status            String?
  followers         Int?                @default(0)
  archivesLink      BigInt              @map("archives_link")
  spotifyId         String?             @map("spotify_id")
  albums            BandAlbums[]
  BandFollowers0    BandFollowers0[]
  BandFollowers1    BandFollowers1[]
  UserPostsActive   UserPostsActive[]
  UserPostsArchived UserPostsArchived[]
  BandUnFollowers0  BandUnFollowers0[]
  BandUnFollowers1  BandUnFollowers1[]

  @@unique([archivesLink])
  @@index([genreTags], type: Gin)
  @@map("bands")
}

model BandsBackup {
  id           String   @id
  name         String
  namePretty   String   @map("name_pretty")
  genreTags    String[] @default([]) @map("genre_tags")
  country      String?
  status       String?
  followers    Int?     @default(0)
  archivesLink BigInt?  @map("archives_link")
  spotifyId    String?  @map("spotify_id")

  @@map("bands_backup")
}

model BandAlbums {
  id           String    @id @default(cuid())
  bandId       String    @map("band_id")
  name         String    @map("name")
  namePretty   String    @map("name_pretty")
  archivesLink BigInt?   @map("archives_link")
  type         String?
  releaseDate  DateTime? @map("release_date")
  band         Bands     @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@unique([archivesLink])
  @@map("band_albums")
}

model UpcomingReleases {
  id                String    @id @default(cuid())
  bandId            String    @map("band_id")
  bandName          String    @map("band_name")
  albumName         String    @map("album_name")
  genreTags         String[]  @default([]) @map("genre_tags")
  bandArchivesLink  BigInt?   @map("band_archives_link")
  albumArchivesLink BigInt?   @map("album_archives_link")
  type              String?
  releaseDate       DateTime? @map("release_date")

  @@unique([albumArchivesLink])
  @@map("upcoming_releases")
}

model BandFollowers0 {
  bandId String @map("band_id")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  band   Bands  @relation(fields: [bandId], references: [id])

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([bandId, userId])
  @@map("band_followers_0")
}

model BandFollowers1 {
  bandId String @map("band_id")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  band   Bands  @relation(fields: [bandId], references: [id])

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([bandId, userId])
  @@map("band_followers_1")
}

model BandUnFollowers0 {
  bandId String @map("band_id")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  band   Bands  @relation(fields: [bandId], references: [id])

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([bandId, userId])
  @@map("band_unfollowers_0")
}

model BandUnFollowers1 {
  bandId String @map("band_id")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  band   Bands  @relation(fields: [bandId], references: [id])

  @@unique([userId, bandId], name: "userId_bandId")
  @@index([bandId, userId])
  @@map("band_unfollowers_1")
}

model UserUnFollowers0 {
  userId           String @map("user_id")
  unfollowedUserId String @map("unfollowed_user_id")
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, unfollowedUserId], name: "userId_unfollowedUserId")
  @@map("user_unfollowers_0")
}

model UserUnFollowers1 {
  userId           String @map("user_id")
  unfollowedUserId String @map("unfollowed_user_id")
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, unfollowedUserId], name: "userId_unfollowedUserId")
  @@map("user_unfollowers_1")
}

model UserPostsActive {
  id             String           @id @default(cuid())
  userId         String           @map("user_id")
  bandId         String?          @map("band_id")
  bandName       String           @map("bandname")
  title          String?
  genreTags      String[]         @default([]) @map("genre_tags")
  postContent    String?          @map("post_content")
  YTLink         String?          @map("yt_link")
  SpotifyLink    String?          @map("spotify_link")
  BandCampLink   String?          @map("bandcamp_link")
  previewUrl     String?          @map("preview_url")
  postDateTime   DateTime         @default(now()) @map("post_datetime")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  band           Bands?           @relation(fields: [bandId], references: [id])
  ReportedPosts  ReportedPosts[]
  UserPostsSaved UserPostsSaved[]

  @@index([userId, bandName, genreTags])
  @@map("user_posts_active")
}

model UserPostsArchived {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  bandId       String?  @map("band_id")
  bandName     String   @map("bandname")
  title        String?
  genreTags    String[] @default([]) @map("genre_tags")
  postContent  String?  @map("post_content")
  YTLink       String?  @map("yt_link")
  SpotifyLink  String?  @map("spotify_link")
  BandCampLink String?  @map("bandcamp_link")
  previewUrl   String?  @map("preview_url")
  postDateTime DateTime @default(now()) @map("post_datetime")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  band         Bands?   @relation(fields: [bandId], references: [id])

  @@index([userId])
  @@map("user_posts_archived")
}

model UserPostsSaved {
  userId    String          @map("user_id")
  postId    String          @map("post_id")
  createdAt DateTime        @default(now()) @map("created_at")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      UserPostsActive @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId, userId])
  @@map("user_posts_saved")
}

model UserEventsSaved {
  userId    String   @map("user_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@index([eventId, userId])
  @@map("user_events_saved")
}

model GenreTags {
  genres String @id

  @@map("genre_tags")
}

model Events {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  eventName       String            @map("event_name")
  country         String
  city            String
  fromDate        DateTime
  toDate          DateTime
  bands           String[]          @default([])
  bandIds         String[]          @default([])
  genreTags       String[]          @map("genre_tags")
  imageUrl        String?
  website         String?
  createdAt       DateTime          @default(now()) @map("created_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserEventsSaved UserEventsSaved[]

  @@index([country, fromDate, toDate, bandIds, genreTags])
  @@map("events")
}

model ReportedPosts {
  id        String          @id @default(cuid())
  userId    String          @map("user_id")
  postId    String          @map("post_id")
  field     String
  value     String?
  comment   String?
  createdAt DateTime        @default(now()) @map("created_at")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      UserPostsActive @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("reported_posts")
}

model UserFeedback {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  title   String
  comment String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_feedback")
}
